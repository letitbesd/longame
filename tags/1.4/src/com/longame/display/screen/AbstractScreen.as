package com.longame.display.screen{	import com.bumpslide.ui.BaseClip;	import com.longame.core.IDisposable;	import com.longame.display.core.RenderManager;	import com.longame.game.scene.BaseScene;	import com.longame.resource.ResourceManager;	import com.longame.utils.DisplayObjectUtil;	import com.xingcloud.tutorial.TutorialManager;		import org.osflash.signals.Signal;		import starling.display.DisplayObject;	import starling.display.Sprite;

	/**	 * AbstractScreen Class	 * 	 * @author Sascha Balkau	 * @version 0.9.5	 */	public class AbstractScreen extends Sprite implements  IScreen	{		protected var _scene:BaseScene;		protected var _sceneLayer:Sprite;		protected var _uiLayer:Sprite;				////////////////////////////////////////////////////////////////////////////////////////		// Public Methods                                                                     //		////////////////////////////////////////////////////////////////////////////////////////				/**		 * Creates a new AbstractScreen instance.		 */		public function AbstractScreen()		{			super();		}		/**		 * Used to create any display children (and other objects) that the display		 * contains.		 * 		 * @private		 */		protected function createLayers() : void		{			this._sceneLayer=new Sprite();			this.addChild(this._sceneLayer);						this._uiLayer=new Sprite();			this.addChild(this._uiLayer);		}		/**		 * 创建场景，覆盖		 * */		protected function createScene():void		{			//_scene=...			//_scene.setup(_sceneLayer,...);		}		/**		 * 创建ui，覆盖		 * */		protected function createUi():void		{					}		////////////////////////////////////////////////////////////////////////////////////////		// Getters & Setters                                                                  //		////////////////////////////////////////////////////////////////////////////////////////		public function get scene():BaseScene		{			return _scene;		}		public function get ui():Sprite{		    return this._uiLayer;			}		protected var _onCreate:Signal=new Signal(AbstractScreen);		public function get onCreate():Signal		{			return _onCreate;		}		////////////////////////////////////////////////////////////////////////////////////////		// Public Methods                                                                     //		////////////////////////////////////////////////////////////////////////////////////////		/**		 * @inheritDoc		 */		public function load():void		{			if(ResourceManager.instance.paused) this.setup();			else ResourceManager.instance.onComplete.addOnce(this.setup);		}		/**		 * @inheritDoc		 */		public function update(para:Object=null):void		{           //to be inherited		}				protected var _disposed:Boolean=false;		public function get disposed():Boolean		{			return this._disposed;		}		/**		 * @inheritDoc		 */		override public function dispose():void		{			if(this._disposed) return;			this._disposed=true;			super.dispose();			doDispose();		}		////////////////////////////////////////////////////////////////////////////////////////		// Event Handlers                                                                     //		////////////////////////////////////////////////////////////////////////////////////////				/**		 * Sets up the display. This method should only be called once after object		 * instantiation. It initiates the display by creating child objects and adding		 * event listeners.		 * 		 * @private		 */		protected function setup(data:*=null):void		{			ResourceManager.instance.onComplete.remove(this.setup);			createLayers();			createScene();			createUi();			addEventListeners();			this.onCreate.dispatch(this);		}		/**		 * Should be used to add any required event listeners to the display and/or it's		 * children.		 * 		 * @private		 */		protected function addEventListeners():void		{			/* Abstract method! */		}		/**		 * Should be used to unload any assets that have been loaded for the display.		 * 		 * @private		 */		protected function doDispose():void		{			/* Abstract method! */			if(this.parent){				this.parent.removeChild(this);			}//			this.removeChildren();//			while(_uiLayer.numChildren){//				var uiChild:DisplayObject=_uiLayer.getChildAt(0);//				_uiLayer.removeChild(uiChild);//				if(uiChild is IDisposable){//					(uiChild as IDisposable).dispose();//				}//			}			if(_scene){				_scene.dispose();				_scene=null;			}			_sceneLayer=null;			_uiLayer=null;			_onCreate=null;			RenderManager.dispose();		}	}}